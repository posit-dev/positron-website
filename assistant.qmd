---
title: "Positron Assistant"
---

::: {.callout-note}

Positron Assistant is a **preview** feature in Positron 2025.07.0-170 and beyond.

At this time, we support **Anthropic for chat**, and **GitHub Copilot for inline code completions**. We will continue to add more language model providers in future releases.

We are actively improving the user experience and functionality, so please provide [feedback](https://github.com/posit-dev/positron/discussions) and [report any issues](https://github.com/posit-dev/positron/issues/new/choose) you encounter.

:::

Positron Assistant is an AI client that provides LLM integration within Positron, both for chat and for inline completions. Use Positron Assistant to generate or refactor code, ask questions, get help with debugging, and get suggestions for next steps in your data science projects.

## Getting started

### Step 1: Enable Positron Assistant
1. Opt in to the [`positron.assistant.enable` setting](positron://settings/positron.assistant.enable) to enable Positron Assistant. 

1. Restart Positron or run the _Developer: Reload Window_ command in the Command Palette.

1. Click on the chat robot icon in the sidebar, or run the _Chat: Open Chat in Sidebar_ command in the Command Palette to open the chat.

### Step 2: Configure language model providers

If you don't already have API keys or an account for these providers, see the [Language Model Provider API Keys](#language-model-provider-api-keys-authentication) section below for instructions on how to get them, before continuing with the steps below.

#### Chat

Currently, only Anthropic Claude is available for sidebar chat and inline chat. Positron Assistant uses a bring-your-own API key model for Anthropic, so you'll need to get keys set up ahead of time and bring those into Positron.

If you have an Anthropic account, you should be able to get an API key from the [Anthropic Console](https://console.anthropic.com/) on the [admin keys page](https://console.anthropic.com/settings/admin-keys).

Copy and save the API key to a password manager or another secure location. To [add Anthropic as a language model provider](#adding-language-model-providers) in Positron, this key will be used to authenticate to Anthropic.

#### Code Completions

At this time, only GitHub Copilot is available for inline code completions.

If you have a Github account with Copilot enabled, you can authenticate to GitHub Copilot in Positron Assistant in the language model dialog. The authentication flow will open up a browser and direct you to sign into Github. Once authenticated, Copilot will be available for inline code completions.

#### Adding language model providers

1. Run the _Positron Assistant: Positron Assistant: Configure Language Model Providers_ command to open the language model provider dialog. You can also click the <kbd>Add Model Provider...</kbd> button in the Positron Assistant chat area.

1. Select the model provider you want to add.

1. Authenticate with the model provider.
    - For Anthropic, paste your API key into the input field and click <kbd>Sign in</kbd>.
    - For GitHub Copilot, click the <kbd>Sign in</kbd> button. This will open a browser window where you can authenticate with your GitHub account via OAuth.

1. Once authenticated successfully, the <kbd>Sign in</kbd> button will change to <kbd>Sign out</kbd>, and available models from the provider will be registered.

1. Click the <kbd>Done</kbd> button once you have added all the desired model providers. You can always come back to this dialog later to add or remove providers.

#### Removing language model providers

1. Run the _Positron Assistant: Positron Assistant: Configure Language Model Providers_ command to open the language model provider dialog. You can also click the <kbd>Add Model Provider...</kbd> button in the Positron Assistant chat area to open this dialog.

1. Select the model provider you want to remove.

1. Click the <kbd>Sign out</kbd> button to remove the provider from Positron Assistant.

1. Click the <kbd>Done</kbd> button to close the dialog.

### Step 3: Use Positron Assistant!

Use the [chat pane](#chat-pane), [inline chat](#inline-chat), or [completions](#completions) in the editor to interact with the language models.

## Using Positron Assistant

### Chat pane

Click on the chat robot icon in the sidebar, or run the _Chat: Open Chat in Sidebar_ command in the Command Palette to open the chat.

Positron Assistant's Chat pane (in the Activity Panel by default) has access to your R and Python console session inputs/outputs, as well as in-memory objects and dataframes as available in the variables pane. Assistant can look at the Plots pane too, if instructed.

#### Chat modes

To switch between modes, click the mode selector at the bottom of the chat pane.

Positron Assistant supports the following chat modes:

- **Ask**: Use this mode to ask questions, get help with debugging, or request code generation. This is the default mode when you open the chat.
- **Edit**: Use this mode to make code changes with the model's help. The model will suggest code changes based on your prompts, and you can apply those changes to your code.
- **Agent**: Use this mode if you'd like Positron Assistant to determine the steps needed for your request and autonomously carry out the work. On your behalf, Positron Assistant can execute code in the Console, create and modify files, and identify the next steps based on the results of the previous steps.

#### Attaching context

To attach specific files or directories as context for your prompts, you can either:

- Click the <kbd>Add Context...</kbd> button in the Chat pane and choose "Files & Folders..." in the quickpick to select relevant items; or
- Drag files to the Chat pane as attachments

#### Code generation and execution

Code generated by Assistant can be run in the Console, copied to the clipboard, or sent to the Editor via controls attached to code output blocks.

#### Slash commands

Slash commands provide quick access to common tasks without writing long prompts. Start by typing / in the chat box to see available commands. For example, the `/quarto` command converts the current chat conversation into a Quarto document.

#### Chat participants

Chat participants provide specialized knowledge to Positron Assistant. You can add a chat participant by clicking the <kbd>@</kbd> button or typing `@` in the Chat pane plus the chat participant name. Please reference the [Shiny Assistant](#shiny-assistant) section for more information on the use of a Shiny chat participant.

#### Chat conversation history

It's important to start a new chat conversation for each new task, so the model has the most relevant context. To create a new chat conversation, click the plus <kbd>+</kbd> button in the top right of the Chat pane or run the _Chat: New Chat_ command in the Command Palette.

To view your chat conversations, click the clock icon in the top right of the Chat pane or run the _Chat: Show Chats..._ command in the Command Palette. You can then select a previous conversation to switch back to it.

### Inline chat

Inline chat is very useful for asking questions in the context of your code, and also includes an interface for integrating changes suggested by the model.

To open this mini chat interface can in an editor or terminal, use the default keybinding <kbd>Cmd</kbd> + <kbd>I</kbd>, or run the command _Inline Chat: Editor Inline Chat_ in an editor or the command _Inline Chat: Terminal Inline Chat_ in a terminal.

### Completions

If GitHub Copilot is enabled and the user pauses typing for a few seconds, Positron Assistant will offer completions in most contexts. If it is not working, check the following:

- Make sure you have a [language model provider added](#adding-language-model-providers) for completions.
- Check the [developer tools console logs](troubleshooting.qmd#developer-tools) or the Assistant [output](./troubleshooting.qmd##output-panel) logs to see if there are any errors logged.

### Shiny Assistant

Shiny Assistant is a chat participant available within Positron Assistant that provides context-aware assistance for developing Shiny applications in Python or R. It can help you with tasks such as generating Shiny UI components, server logic, and reactive expressions.

Shiny Assistant enhances the default prompt with additional information about Shiny that we have found improves the quality of generated apps and Shiny components. It is also kept up to date with the latest Shiny features and best practices, in a way that is not practical with foundation models or fine-tuning.

Shiny Assistant is available in the chat once you have installed the [Shiny extension](https://open-vsx.org/extension/posit/shiny). Like other chat participants, Shiny Assistant can be invoked by typing `@shiny` in the chat pane or inline chat, followed by your question or request related to Shiny development.

### Customizing the default prompt



## Why use Positron Assistant over other AI clients?

Positron Assistant offers novel data science and Positron-specific context compared to other IDE AI tooling. We provide a data-science-centric IDE and allow the LLM to interact with the most important parts of Positron to get better context for better results!

A majority of data science work happens interactively with live data during development. You can load local or remote data, seek to understand it via cleaning, transformations, visualizations, and then modeling, then ultimately generate reproducible code.

While the full code on disk is the ultimate source of truth and gives you the ability to reproduce the results, the ephemeral state is where a data scientist is actually working the majority of the time. As such, existing AI clients that only have access to the code on disk are limited in their ability to provide useful suggestions and context-aware completions for data science.

We use tool-calling heavily within Positron to allow the LLMs to directly interact with Positron's novel data science features. We have built out key integration points that allow the LLM to parse and interact with the current state of the Positron IDE, and will continue to expand these capabilities over time.  

A few examples of these integration points include Positron's:  

- Variables pane, providing names, dimensions, and column names of dataframes and Python/R based database connections, as well as metadata for arrays, lists, and other objects in memory  
- Plots pane for describing the current plot or suggesting variations and next steps for iterating on the current plot  
- Console, available to the model for viewing inputs and code outputs, as well as allowing a user or an AI agent to execute code in the console and view the output
- Session state, providing what language is active in the console session (R or Python, including version), what packages are loaded, and what packages are installed

All of that Positron-specific context is in addition to the core capabilities of what traditional software-oriented GenAI clients have (active files, selected lines of code, files in project, training data in the model, etc.).

## Support and terms of service

Posit does not provide support or assistance for any code written or generated in Positron, with or without Positron Assistant via any model provider. Posit does not support the Anthropic or GitHub Copilot output, or test the logic used by either to generate code from prompts.

### Anthropic

Anthropic Claude is considered "Third Party Materials" as defined in the [Posit End User License Agreement](https://posit.co/about/eula/) and subject to the Anthropic [Terms of Service](https://www.anthropic.com/legal/consumer-terms) and [Privacy Policy](https://www.anthropic.com/legal/privacy). Anthropic Claude is considered “Third Party Materials” as defined in the [Posit End User License Agreement](https://posit.co/about/eula/) and Posit assumes no liability or other obligations with respect thereto and, without limiting the foregoing, is not liable for any loss or damage resulting from the use or access thereof.

### GitHub Copilot

GitHub Copilot is a proprietary tool from GitHub. If you want to use GitHub Copilot, you need a [subscription for GitHub Copilot](https://docs.github.com/en/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot) in your personal GitHub account or to be assigned a seat by an organization with a subscription for GitHub Copilot for Business. Individual snippets of source code or the contents of entire files may be sent to GitHub’s servers to generate suggestions, for more information about how this information is handled, please see the [Copilot Privacy Statement](https://docs.github.com/en/site-policy/privacy-policies/github-general-privacy-statement#personal-data-we-collect).
If you have a Github account with Copilot enabled, you can authenticate to GitHub Copilot in Positron Assistant via the language model dialog. The authentication flow will open up a browser and direct you to sign into Github. Once authenticated, Copilot will be available for inline code completions only.
Students and faculty can use GitHub Copilot for free as part of the GitHub Education program. For more information, see the [GitHub Education page](https://education.github.com/).

By using GitHub Copilot, you acknowledge that your use of GitHub Copilot is governed by their terms of service and you agree to abide by their [terms of service](https://docs.github.com/en/site-policy/github-terms/github-terms-for-additional-products-and-features#github-copilot). GitHub Copilot is considered “Third Party Materials” as defined in the [Posit End User License Agreement](https://posit.co/about/eula/) and Posit assumes no liability or other obligations with respect thereto and, without limiting the foregoing, is not liable for any loss or damage resulting from the use or access thereof.