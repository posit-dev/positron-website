---
title: "Positron Assistant"
---

::: {.callout-important}
Positron Assistant is a **preview** feature in Positron 2025.07.0-204 and beyond.

As of Positron 2025.07.0-204, we support **Anthropic for chat** and **GitHub Copilot for inline code completions**.

In Positron 2025.10.0-199, we added **GitHub Copilot for chat**.

We will continue to add more language model providers in future releases.

We are actively improving the user experience and functionality, so please provide [feedback](https://github.com/posit-dev/positron/discussions) and [report any issues](https://github.com/posit-dev/positron/issues/new/choose) you encounter.
:::

Positron Assistant is an AI client that provides LLM integration within Positron, both for chat and for inline completions. Use Positron Assistant to generate or refactor code, ask questions, get help with debugging, and get suggestions for next steps in your data science projects.

## Getting started

### Step 1: Enable Positron Assistant

1. Opt in to the [`positron.assistant.enable` setting](positron://settings/positron.assistant.enable) to enable Positron Assistant.

1. Restart Positron or run the _Developer: Reload Window_ command in the Command Palette.

1. Click on the chat robot icon in the sidebar, or run the _Chat: Open Chat in Sidebar_ command in the Command Palette to open the chat.

### Step 2: Configure language model providers

#### Supported model providers

::: {.callout-important}
Currently, we support **Anthropic** and **GitHub Copilot** for sidebar chat and inline chat. At this time, only **GitHub Copilot** is available for inline code completions.
:::

##### Anthropic

Positron Assistant uses a bring-your-own API key model for Anthropic, so you'll need to get keys set up ahead of time and bring those into Positron.

If you have an Anthropic account, you should be able to get an API key from the [Anthropic Console](https://console.anthropic.com/) on the [admin keys page](https://console.anthropic.com/settings/admin-keys).

Copy and save the API key to a password manager or another secure location. In order to [add Anthropic as a language model provider](#adding-language-model-providers) in Positron, this key will be used to authenticate to Anthropic.

##### GitHub Copilot

GitHub Copilot is a proprietary tool from GitHub. If you want to use GitHub Copilot, you need a [subscription for GitHub Copilot](https://docs.github.com/en/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot) in your personal GitHub account or to be assigned a seat by an organization with a subscription for GitHub Copilot for Business.

Students and faculty can use GitHub Copilot for free as part of the GitHub Education program. For more information, see the [GitHub Education page](https://education.github.com/).

Individual snippets of source code or the contents of entire files may be sent to GitHub’s servers to generate suggestions, for more information about how this information is handled, please see the [Copilot Privacy Statement](https://docs.github.com/en/site-policy/privacy-policies/github-general-privacy-statement#personal-data-we-collect).

If you have a GitHub account with Copilot enabled, you can authenticate to GitHub Copilot in Positron Assistant. Follow the steps in [adding language model providers](#adding-language-model-providers) to get started.

::: {.callout-tip}
If you are using Positron with a [remote SSH](remote-ssh.qmd) session, you will need to authenticate to GitHub on the _remote server_ as well. Follow [along on GitHub](https://github.com/posit-dev/positron/issues/8409) as we make improvements in this area.
:::

#### Adding language model providers

1. Run the _Positron Assistant: Configure Language Model Providers_ command to open the language model provider dialog. You can also click the **Add Model Provider...** button in the Positron Assistant chat area.

1. Select the model provider you want to add.

1. Authenticate with the model provider.
    - For Anthropic, paste your API key into the input field and click **Sign in**.
    - For GitHub Copilot, click the **Sign in** button. This will open a browser window where you can authenticate with your GitHub account via OAuth.

1. Once authenticated successfully, the **Sign in** button will change to **Sign out**, and available models from the provider will be registered.

1. Click the **Done** button once you have added all the desired model providers. You can always come back to this dialog later to add or remove providers.

#### Removing language model providers

1. Run the _Positron Assistant: Configure Language Model Providers_ command to open the language model provider dialog. You can also click the **Add Model Provider...** button in the Positron Assistant chat area to open this dialog.

1. Select the model provider you want to remove.

1. Click the **Sign out** button to remove the provider from Positron Assistant.

1. Click the **Done** button to close the dialog.

### Step 3: Use Positron Assistant!

Use the [Chat pane](#chat-pane), [inline chat](#inline-chat), or [code completions in an editor](#completions) to interact with the language models.

## Using Positron Assistant

### Chat pane

Click on the chat robot icon in the sidebar, or run the _Chat: Open Chat in Sidebar_ command in the Command Palette to open the chat.

Positron Assistant's Chat pane (in the Activity Panel by default) has access to your R and Python console session inputs/outputs, as well as in-memory objects and dataframes as available in the Variables pane. Assistant can look at the Plots pane too, if instructed.

#### Chat modes

To switch between modes, click the mode selector at the bottom of the Chat pane.

Positron Assistant supports the following chat modes:

- **Ask**: Use this mode to ask questions, get help with debugging, or request code generation. This is the default mode when you open the chat.
- **Edit**: Use this mode to make code changes with the model's help. The model will suggest code changes based on your prompts, and you can apply those changes to your code.
- **Agent**: Use this mode if you'd like Positron Assistant to determine the steps needed for your request and autonomously carry out the work. On your behalf, Positron Assistant can execute code in the Console, create and modify files, and identify the next steps based on the results of the previous steps.

#### Attaching context

Providing context to the model is crucial for getting accurate and relevant responses. To attach specific files or directories as context for your prompts, you can either:

- Click the **{{< fa paperclip >}} Add Context...** button in the Chat pane and choose "Files & Folders..." in the quickpick to select relevant items; or
- Drag files to the Chat pane as attachments

#### Code generation and execution

Code generated by Assistant can be run in the Console, copied to the clipboard, or sent to the Editor via controls attached to code output blocks.

#### Slash commands

Slash commands provide quick access to common tasks without writing long prompts. Start by typing / in the chat box to see available commands. For example, the `/quarto` command converts the current chat conversation into a Quarto document.

#### Chat participants

::: {.callout-tip}
Currently, chat participants are only available in **Ask** mode.
:::

Chat participants provide specialized knowledge to Positron Assistant. You can add a chat participant by clicking the **{{< fa at >}}** button or typing `@` in the Chat pane plus the chat participant name. Please reference the [Shiny Assistant](#shiny-assistant) section for more information on the use of a Shiny chat participant.

#### Chat conversation history

It's important to start a new chat conversation for each new task, so the model has the most relevant context. To create a new chat conversation, click the **{{< fa plus >}}** button in the top right of the Chat pane or run the _Chat: New Chat_ command in the Command Palette.

To view your chat conversations, click the clock icon in the top right of the Chat pane or run the _Chat: Show Chats..._ command in the Command Palette. You can then select a previous conversation to switch back to it.

#### Customizing the default prompt

To add further instructions to the default prompt for Positron Assistant, create a file named `llms.txt` in your workspace directory. The contents of this file will be appended to the default prompt, which is used for all chat and inline chat interactions. This file does not affect code completions.

### Inline chat

Inline chat is very useful for asking questions in the context of your code, and also includes an interface for integrating changes suggested by the model.

To open this mini chat interface can in an editor or terminal, use the default keybinding {{< kbd mac=Command-I win=Ctrl-I linux=Ctrl-I >}}, or run the command _Inline Chat: Editor Inline Chat_ while your cursor in an editor or the command _Inline Chat: Terminal Inline Chat_ while your cursor is in a terminal.

### Completions

Code completions are code suggestions that appear inline as you type in an editor.

Interact with suggestions by:

- Pressing the <kbd>Tab</kbd> key to accept the entire suggestion.
- Pressing {{< kbd mac=Command-→ win=Ctrl-→ linux=Ctrl-→ >}} to accept the suggestion word-by-word for a single line suggestion, or line-by-line for mult-line suggestions.
- Continuing to type to reject the suggestion.

If you are not receiving suggestions, please:

- Make sure you are authenticated with GitHub Copilot in the [language model provider configuration](#adding-language-model-providers).
- Check the [developer tools console logs](troubleshooting.qmd#developer-tools) or the Assistant [output](./troubleshooting.qmd#output-panel) logs to see if there are any errors logged.

#### Pause code completions temporarily

Completions from an LLM such as GitHub Copilot can be super useful, but sometimes they can be distracting or interfere with other completions from the Python or R LSP.

To pause code completions temporarily, the following methods are available:

- Run the command _Snooze Inline Suggestions_ in the Command Palette and select the duration to snooze completions for; or
- Click on the Assistant status bar icon, then the **Snooze** button to snooze completions
Snooze these completions temporarily from the Assistant status bar popup

To view the remaining time on a snooze, hover over the Assistant status bar icon to see a popup with the remaining time.

To cancel the snooze early, the following methods are available:

- Run the command _Cancel Snooze Inline Suggestions_ in the Command Palette; or
- Click on the Assistant status bar icon, then the stop {{< fa circle-stop >}} button

#### Disable code completions

If you prefer not to receive code completions from Positron Assistant, you can disable them for all files or specific file types and patterns using the following methods:

- **To toggle completions on or off for all files:** Run the command _Positron Assistant: Toggle (Enable/Disable) Completions_ in the Command Palette

- **To disable completions for all files or for the current file type:** Click the Assistant status bar icon, then in the popup, uncheck **All files** to disable completions for all files, or uncheck the current file type to disable completions for that file type

- **To configure the languages for which inline completions are enabled or disabled:** Modify the setting [`positron.assistant.inlineCompletions.enable`](positron://settings/positron.assistant.inlineCompletions.enable)

- **To specify glob patterns for which inline completions should be disabled:** Modify the setting [`positron.assistant.inlineCompletionExcludes`](positron://settings/positron.assistant.inlineCompletionExcludes)

### Console Actions
Positron Assistant is available within the Console, and provides quick help when errors are encountered. 

Errors get two options, ✨ Fix and ✨ Explain. Clicking on these options sends your session to Assistant, which then immediately starts on a solution. Assistant automatically receives the appropriate context, including the traceback you're troubleshooting, your recent code inputs, and the active file. You can respond to Assistant after it provides feedback, allowing you to tailor code in Fix mode or ask addition queries in Explain mode. 

#### Fix

Fix triggers Assistant to diagnose and propose a fixed revision of the code you're running. The code it generates can be run directly in the Console, or applied in an Editor if you're coding in files. Assistant  uses the traceback to see where the error originates, and will suggest if a fix should be applied to a file instead of run in the Console. Assistant will focus primarily on code in Fix mode, with addition information being limited to 1-2 lines of context for the code it generates.

#### Explain

Explain takes a different approach: Assistant will focus on providing a description of the code's function, an analysis of the error condition, and possible paths towards a solution. As opposed to Fix, Explain provides a teaching experience whether you want to understand the code better or the issue requires domain expertise only a human can provide. 

#### Disabling Console Actions
Console actions are on by default, when Assistant is enabled and when you are signed into a model provider. If you are interested in disabling these actions, you may toggle the setting [`positron.assistant.consoleActions.enable`](positron://settings/positron.assistant.consoleActions.enable). This will remove the actions from any errors which appear in the Console. This feature can be turned on or off at any time.

### Shiny Assistant

Shiny Assistant is a chat participant available within Positron Assistant that provides context-aware assistance for developing Shiny applications in Python or R. It can help you with tasks such as generating Shiny UI components, server logic, and reactive expressions.

Shiny Assistant enhances the default prompt with additional information about Shiny that we have found improves the quality of generated apps and Shiny components. It is also kept up to date with the latest Shiny features and best practices, in a way that is not practical with foundation models or fine-tuning.

Shiny Assistant is available in the chat once you have installed the [Shiny extension](https://open-vsx.org/extension/posit/shiny). Like other chat participants, Shiny Assistant can be invoked by typing `@shiny` in the Chat pane or Inline Chat, followed by your question or request related to Shiny development.

## Why use Positron Assistant over other AI clients?

Positron Assistant offers novel data science and Positron-specific context compared to other IDE AI tooling. We provide a data-science-centric IDE and allow the LLM to interact with the most important parts of Positron to get better context for better results!

A majority of data science work happens interactively with live data during development. You can load local or remote data, seek to understand it via cleaning, transformations, visualizations, and then modeling, then ultimately generate reproducible code.

While the full code on disk is the ultimate source of truth and gives you the ability to reproduce the results, the ephemeral state is where a data scientist is actually working the majority of the time. As such, existing AI clients that only have access to the code on disk are limited in their ability to provide useful suggestions and context-aware completions for data science.

We use tool-calling heavily within Positron to allow the LLMs to directly interact with Positron's novel data science features. We have built out key integration points that allow the LLM to parse and interact with the current state of the Positron IDE, and will continue to expand these capabilities over time.  

A few examples of these integration points include Positron's:  

- Variables pane, providing names, dimensions, and column names of dataframes and Python/R based database connections, as well as metadata for arrays, lists, and other objects in memory  
- Plots pane for describing the current plot or suggesting variations and next steps for iterating on the current plot  
- Console, available to the model for viewing inputs and code outputs, as well as allowing a user or an AI agent to execute code in the console and view the output
- Session state, providing what language is active in the console session (Python or R, including version), what packages are loaded, and what packages are installed

All of that Positron-specific context is in addition to the core capabilities of what traditional software-oriented GenAI clients have (active files, selected lines of code, files in project, training data in the model, etc.).

## Support and terms of service

Posit does not provide support or assistance for any code written or generated in Positron, with or without Positron Assistant via any model provider. Posit does not support the Anthropic or GitHub Copilot output, or test the logic used by either to generate code from prompts.

### Anthropic

By using Anthropic Claude, you acknowledge that your use of Anthropic Claude is subject to the Anthropic [Terms of Service](https://www.anthropic.com/legal/consumer-terms) and [Privacy Policy](https://www.anthropic.com/legal/privacy). Anthropic Claude is considered "Third Party Materials" as defined in the [Posit End User License Agreement](https://posit.co/about/eula/) and Posit assumes no liability or other obligations with respect thereto and, without limiting the foregoing, is not liable for any loss or damage resulting from the use or access thereof.

### GitHub Copilot

By using GitHub Copilot, you acknowledge that your use of GitHub Copilot is governed by their terms of service and you agree to abide by their [terms of service](https://docs.github.com/en/site-policy/github-terms/github-terms-for-additional-products-and-features#github-copilot). GitHub Copilot is considered “Third Party Materials” as defined in the [Posit End User License Agreement](https://posit.co/about/eula/) and Posit assumes no liability or other obligations with respect thereto and, without limiting the foregoing, is not liable for any loss or damage resulting from the use or access thereof.
