---
title: "Advanced Extension API"
---

::: {.callout-tip}
This guide covers advanced extension development scenarios. Read the [Extension Development](extension-development.qmd) guide first for basic setup and common use cases.
:::

::: {.callout-warning}
The `@posit-dev/positron` package is experimental. APIs may change between releases. Pin your dependency version and expect breaking changes until the 1.0 release.
:::

## When to use advanced APIs

The advanced APIs help you build extensions that deeply integrate with Positron's data science features:

* **Stream output in real-time** from long-running Python, R, or Julia computations
* **Create custom viewer panels** for interactive visualizations, dashboards, or specialized UIs
* **Build AI chat agents** that understand your data context
* **Support new languages** with statement execution and help providers

## API overview

| Namespace              | Typical use case                                                         |
| ---------------------- | ------------------------------------------------------------------------ |
| `positron.window`      | Preview URLs/HTML, build custom webview panels, monitor console layout   |
| `positron.runtime`     | Execute & observe code, enumerate sessions, inspect variables            |
| `positron.ai`          | Register chat agents, fetch contextual metadata for prompts              |
| `positron.connections` | Add database / service drivers with custom credential UI                 |
| `positron.languages`   | Provide statement-range & help-topic providers for new languages         |
| `positron.methods`     | Call low-level RPCs or show purpose-built dialogs                        |
| `positron.environment` | Inspect environment-variable contributions from all installed extensions |

The following examples assume you have already imported the Positron API:

```typescript
import { tryAcquirePositronApi } from "@posit-dev/positron";
const positron = tryAcquirePositronApi();
```

All code examples require that your extension is running in Positron (not VS Code).

## Stream output with observers

Capture and process output from long-running computations as they execute:

```typescript
import * as vscode from "vscode";

export async function runLongTask(code: string) {
  if (!positron) return;

  // Create an observer to handle output events
  const observer = {
    onStarted: () => vscode.window.showInformationMessage("Analysis started"),
    onOutput: (message) => {
      // Process output chunks as they arrive
      console.log("Output:", message.text || message);
    },
    onError: (error) => {
      console.error("Runtime error:", error);
      vscode.window.showErrorMessage(`Error: ${error.message}`);
    },
    onFinished: () => vscode.window.showInformationMessage("Analysis complete"),
  };

  // Execute code with streaming output
  await positron.runtime.executeCode(
    "python",
    code,
    true,    // show in console
    false,   // not an evaluation
    undefined,
    undefined,
    observer
  );
}
```

Use observers when you need to process output progressively without blocking the UI. This is especially useful for monitoring long-running analyses or streaming results.

## Create custom preview panels

Build interactive viewer panels with full control over the content:

```typescript
// Create a preview panel for custom visualizations
const panel = positron.window.createPreviewPanel(
  "myExtension.preview",
  "Model Diagnostics",
  false,  // preserve focus
  {
    enableScripts: true,
    localResourceRoots: [vscode.Uri.file(context.extensionPath)]
  }
);

// Set the panel content
panel.webview.html = await generateVisualizationHtml();
```

The `createPreviewPanel` method creates an isolated browser context. Use it for data visualizations, interactive dashboards, or any web-based UI that needs to integrate with Positron.

## Build AI chat agents

Create chat agents that understand your data context and help with analysis:

```typescript
// Define chat agent metadata
const agentMetadata = {
  id: "myExtension.dataAnalyzer",
  name: "Data Analyzer",
  description: "Analyzes and explains data in your current session",
  modes: [positron.PositronChatMode.Ask],
  locations: [positron.PositronChatAgentLocation.Panel],
};

// Register the chat agent
const disposable = await positron.ai.registerChatAgent(
  agentMetadata,
  async (request, context, response) => {
    // Get runtime context including variables and selections
    const dataContext = await positron.ai.getPositronChatContext(request);
    
    // Respond with analysis
    if (dataContext.activeSelection) {
      response.markdown(`Analyzing ${dataContext.activeSelection.rowCount} rows...`);
      // Add your analysis logic here
    }
  }
);

context.subscriptions.push(disposable);
```

## Add language support with statement providers

Provide intelligent code execution for languages that Positron doesn't natively support:

```typescript
// Implement a statement range provider for custom language support
class CustomStatementProvider {
  async provideStatementRange(document, position) {
    // This example selects Python-style indented blocks
    const currentLine = document.lineAt(position.line);
    const currentIndent = currentLine.firstNonWhitespaceCharacterIndex;
    
    // Find the start and end of the current block
    let startLine = position.line;
    let endLine = position.line;
    
    // Scan upward for block start
    while (startLine > 0) {
      const prevLine = document.lineAt(startLine - 1);
      if (prevLine.firstNonWhitespaceCharacterIndex >= currentIndent) {
        startLine--;
      } else {
        break;
      }
    }
    
    // Scan downward for block end
    while (endLine < document.lineCount - 1) {
      const nextLine = document.lineAt(endLine + 1);
      if (nextLine.firstNonWhitespaceCharacterIndex >= currentIndent) {
        endLine++;
      } else {
        break;
      }
    }
    
    return {
      range: new vscode.Range(
        startLine, 0,
        endLine, document.lineAt(endLine).text.length
      )
    };
  }
}

// Register the provider for your language
positron.languages.registerStatementRangeProvider(
  { language: "python" },
  new CustomStatementProvider()
);
```


## Best practices

### Performance
* Batch API calls when possible - use `getSessionVariables()` instead of multiple individual lookups
* All API methods are asynchronous - always use `await` or handle promises appropriately

### Resource management
* Dispose event listeners in your extension's `deactivate()` function
* Add disposables to `context.subscriptions` for automatic cleanup

### Security
* Set `localResourceRoots` when creating webviews
* Use content security policies for webviews that load external content
* Never expose sensitive data in webview messages

## Version compatibility

| `@posit-dev/positron` | Positron desktop |
| --------------------- | ---------------- |
| 0.1.x                 | 2025.07.0 or later |

## Resources and support

* **API reference**: Complete type documentation on [npm](https://www.npmjs.com/package/@posit-dev/positron)
* **Get help**: Ask questions in [GitHub discussions](https://github.com/posit-dev/positron/discussions)
* **Report issues**: File bugs in the [API repository](https://github.com/posit-dev/positron-api-pkg/issues)
* **Examples**: Browse the [demo extension](https://github.com/nstrayer/positron-extension-demo) for working code