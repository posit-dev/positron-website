---
title: "User Interface"
---

The Positron interface provides a flexible environment for data science that can be tailored to your needs. You can organize tools and outputs into distinct, customizable panes. This lets you tailor your workspace to your workflows in Python, R, and other languages.

## Basic overview

> This section outlines the core layout elements of the Positron interface Each pane plays a distinct role in coding, data exploration, and model development. This gives you full control over your data science environment.
+ ![Interface of the Positron development environment showing Title Bar, Top Bar, Activity Bar, Primary Sidebar, Workspace, Secondary Sidebar, and Status Bar.](images/user-interface.png)

- **Title bar**: The title bar shows the active file and project along with window controls.
- **Top bar**: The top bar provides global project tools such as file search. It also lets you change the [active interpreter session](./managing-interpreters.qmd#active-interpreter-session).
- **Activity bar**: The activity bar provides quick access to core views such as Explorer, Search, Source Control, and Extensions.
- **Primary sidebar**: The primary sidebar appears on the left by default. This pane contains the File Explorer to navigate the project directory.
- **Editor pane**: The editor pane appears in the center and provides a full-featured development environment for writing and debugging code across multiple languages and file formats.
- **Panel pane**: The panel pane appears below the editor and contains contextual development tools like Terminal, Console, Output, Problems, Ports, and Debug Console.
- **Secondary sidebar**: The secondary sidebar appears on the right by default. It helps you interact with runtimes and contains tabs like **SESSION**, **CONNECTIONS**, **HELP**, **VIEWER**, **VARIABLES**, and **PLOTS**.
- **Status bar**: The status bar displays project details like the Git branch, language mode, and cursor position.
- **Command Palette**: The Command Palette provides quick access to all Positron commands through a searchable interface.

## Editor pane

The editor appears in the center by default. The editor is where you write and debug your code. The editor delivers a full-featured integrated development environment (IDE) experience for data science workflows in Python, R, and other languages.

- You can write and edit scripts, notebooks, and apps with responsive syntax-aware features.
- The editor is built on Code OSS, the same foundation as VS Code, for a familiar and extensible experience.
- For layout controls, see [VS Code Editor Basics](https://code.visualstudio.com/docs/editing/codebasics).


### Key features
- **Syntax Highlighting**  
  Intelligent color schemes to help you quickly parse R, Python, SQL, YAML, and more.
- **Auto completion & Intellisense**  
  Language server support provides live suggestions, signature help, and hover tooltips.
- **Inline Diagnostics**  
  Errors, warnings, and linter messages appear in context as you type.
- **Multi-language and Multi-format Support**  
  Work seamlessly across Python or R in source files, Quarto documents or Jupyter notebooks, and markdown files.
- **Live Document Preview**  
  Render Jupyter notebooks, Quarto documents, Shiny apps, and more next to your code for immediate feedback.
- **Tabs and Split View**  
  Organize workspaces with multiple tabs or horizontal and vertical splits to suit your workflow.
- **Version Control Integration**  
  View diffs, stage changes, and commit directly within the editor.

## Panel pane
The panel below the editor provides contextual tools for development and debugging.

### Terminal
- The terminal provides a fully integrated shell for script execution, command-line interface (CLI) tools, and environment management.
- Multiple terminals are supported and session-specific tabs are available.

### Console
- The native console displays Python or R input and output along with the current working directory.
- Multiple Python and R interpreter sessions are supported. See the [managing interpreter sessions](./managing-interpreters.qmd) guide to learn more.

### Other panel tabs
- **Output**: Logs from builds, publishing, or package management.
- **Problems**: Lists code issues with quick navigation.
- **Ports**: Manage forwarded ports for interactive apps like Shiny or Flask.
- **Debug console**: Evaluate expressions and view debugging information in real time.

## Layout customization

Positron offers flexible layout options to suit a variety of development workflows. You can rearrange the layout by dragging panes (for example, move **Help** into the **Session** pane) to build your ideal workspace.

### Layout presets

- **Stacked** (default): Editor above, with Console, Terminal, Output, Problems, Ports, and Debug Console below. Designed for traditional script-based workflows.
- **Side-by-side**: Useful for wide-screen users or those who prefer horizontal splitting.
- **Notebook style**: Emphasizes the editor workspace for full focus on a Jupyter Notebook or source file, minimizing other panes.  

- **Stacked** (default): The default layout positions the Editor pane in the center, the Panel below the Editor pane. This layout is designed for traditional script-based workflows.
- **Side-by-side**: Useful for wide-screen users or those who prefer horizontal splitting.
- **Notebook style**: Emphasizes the editor workspace for full focus on a Jupyter Notebook or source file. This layout minimizes other panes.  

### Layout commands

To customize layout options, use the **"Customize Layout..."** command. 

You can toggle the sidebars in and out of view using the **View: Toggle Primary Side Bar Visibility** and **View: Toggle Status Bar Visibility** commands.

## Command palette 

Positron inherits the Command Palette from VS Code. The Command Palette is a fast and powerful way to interact with Positron without taking your hands off the keyboard. Think of it as a search bar for functionality. Rather than navigating menus, you can quickly find and run commands from a single interface.

For additional documentation on the Command Palette, see the [VS Code Command Palette documentation](https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette).

### Command access and execution

The Command Palette provides access to all Positron commands. You can execute any command without using menus or remembering keyboard shortcuts.

To open the Command Palette, press `Cmd+Shift+P` (on macOS) or `Ctrl+Shift+P` (on Windows and Linux). Start typing a keyword or the name of a command. The command palette shows a list of matching actions. Use the arrow keys to select a command, then press `Enter` to run it.

**Common commands:**
- Type `interpreter` to view interpreter session management commands
- Type `git` to view version control commands

### File access and navigation

The Command Palette makes it easy to open files without using the file explorer. This is especially useful in large projects with many files.

Press `Cmd+P` (on macOS) or `Ctrl+P` (on Windows and Linux) to open the file picker. Start typing part of a file name to see matching files. Use the arrow keys to select a file, then press `Enter` to open the selected file.

**Advanced file navigation:**
- Type `>` to switch to command mode
- Type `@` to search for symbols in the current file
- Type `#` to search for symbols across the workspace
- Type `:` followed by a line number to jump to that line

### Tips for effective use

- **Use partial matches:** You do not need to type the full command or file name. The Command Palette uses fuzzy matching to find what you need.
- **Learn common prefixes:** Commands are grouped by category (for example, "View:" for layout commands, "Git:" for version control).
- **Browse available commands:** Open the Command Palette and scroll through the list to discover new functionality.
- **Use recent commands:** The Command Palette shows recently used commands first, making it faster to repeat common tasks.